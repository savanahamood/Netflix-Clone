{"ast":null,"code":"var _jsxFileName = \"/home/savana/Netflix-Clone/netflix-clone/src/components/ModalMovie.js\";\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Image from 'react-bootstrap/Image';\n//import React, { useState } from 'react';\n//import axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ModalMovie(props) {\n  /* const { showFlag, handleClose, movieData } = props;\n  const [Opinion, setOpinion] = useState('');\n  const handleSubmit = async () => {\n      try {\n           const serverUrl = `https://onlineserver-w9zu.onrender.com/getMovies`;\n          const data = {\n              id: movieData.id,\n              title: movieData.title,\n              release_date: movieData.release_date,\n              poster_path: movieData.poster_path,\n              overview:movieData.overview\n             // Opinion:Opinion\n           };\n          console.log(\"sssssss\");\n          axios.post(serverUrl, data).then((res)=>{\n  console.log(res);\n          });\n           handleClose();\n          \n      } catch (error) {\n          console.log(error);\n      }\n  };\n  */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: props.showFlag,\n      onHide: props.handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: props.movieData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          src: `https://image.tmdb.org/t/p/original${props.movieData.poster_path}`,\n          rounded: true,\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: props.handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: props.handleSubmit,\n          children: \"Add it\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = ModalMovie;\nexport default ModalMovie;\nvar _c;\n$RefreshReg$(_c, \"ModalMovie\");","map":{"version":3,"names":["Button","Modal","Image","jsxDEV","_jsxDEV","Fragment","_Fragment","ModalMovie","props","children","show","showFlag","onHide","handleClose","Header","closeButton","Title","movieData","title","fileName","_jsxFileName","lineNumber","columnNumber","Body","src","poster_path","rounded","width","Footer","variant","onClick","handleSubmit","_c","$RefreshReg$"],"sources":["/home/savana/Netflix-Clone/netflix-clone/src/components/ModalMovie.js"],"sourcesContent":["import Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Image from 'react-bootstrap/Image';\n//import React, { useState } from 'react';\n//import axios from 'axios';\n\n\nfunction ModalMovie(props) {\n    /* const { showFlag, handleClose, movieData } = props;\n    const [Opinion, setOpinion] = useState('');\n    const handleSubmit = async () => {\n        try {\n\n            const serverUrl = `https://onlineserver-w9zu.onrender.com/getMovies`;\n            const data = {\n                id: movieData.id,\n                title: movieData.title,\n                release_date: movieData.release_date,\n                poster_path: movieData.poster_path,\n                overview:movieData.overview\n               // Opinion:Opinion\n\n            };\n            console.log(\"sssssss\");\n            axios.post(serverUrl, data).then((res)=>{\nconsole.log(res);\n            });\n\n            handleClose();\n            \n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n */\n    return (\n        <>\n            <Modal show={props.showFlag} onHide={props.handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{props.movieData.title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Image src={`https://image.tmdb.org/t/p/original${props.movieData.poster_path}`} rounded width='100%' />\n                    {/* <div>\n                        <label htmlFor='op'> Write Your Opinion </label>\n                        <br></br>\n                        <input placeholder='write opinion' type=\"text\" value={Opinion} size='50' onChange={(event) => setOpinion(event.target.value)} />\n                    </div> */}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={props.handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={props.handleSubmit }>\n                        Add it\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n\nexport default ModalMovie;"],"mappings":";AAAA,OAAOA,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,KAAK,MAAM,uBAAuB;AACzC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGA,SAASC,UAAUA,CAACC,KAAK,EAAE;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAKI,oBACIJ,OAAA,CAAAE,SAAA;IAAAG,QAAA,eACIL,OAAA,CAACH,KAAK;MAACS,IAAI,EAAEF,KAAK,CAACG,QAAS;MAACC,MAAM,EAAEJ,KAAK,CAACK,WAAY;MAAAJ,QAAA,gBACnDL,OAAA,CAACH,KAAK,CAACa,MAAM;QAACC,WAAW;QAAAN,QAAA,eACrBL,OAAA,CAACH,KAAK,CAACe,KAAK;UAAAP,QAAA,EAAED,KAAK,CAACS,SAAS,CAACC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACflB,OAAA,CAACH,KAAK,CAACsB,IAAI;QAAAd,QAAA,eACPL,OAAA,CAACF,KAAK;UAACsB,GAAG,EAAG,sCAAqChB,KAAK,CAACS,SAAS,CAACQ,WAAY,EAAE;UAACC,OAAO;UAACC,KAAK,EAAC;QAAM;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMhG,CAAC,eACblB,OAAA,CAACH,KAAK,CAAC2B,MAAM;QAAAnB,QAAA,gBACTL,OAAA,CAACJ,MAAM;UAAC6B,OAAO,EAAC,WAAW;UAACC,OAAO,EAAEtB,KAAK,CAACK,WAAY;UAAAJ,QAAA,EAAC;QAExD;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlB,OAAA,CAACJ,MAAM;UAAC6B,OAAO,EAAC,SAAS;UAACC,OAAO,EAAEtB,KAAK,CAACuB,YAAc;UAAAtB,QAAA,EAAC;QAExD;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC,gBACV,CAAC;AAEX;AAACU,EAAA,GAtDQzB,UAAU;AAwDnB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}